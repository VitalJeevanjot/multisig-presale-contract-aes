@compiler >= 6

include "String.aes"

payable contract MuSigPreOrder =

    datatype event = Deposit(address, int)
                   | Submit(int)
                   | Approve(address, int)
                   | Revoke(address, int)
                   | Execute(int)  

    record transaction = {
        to: address,
        value: int,
        data: bytes(32),
        executed: bool
     }

    record state = {
        owners : list(address), 
        ratio : list(int), 
        is_owner : map(address, bool), 
        approvals_required: int,
        transactions: list(transaction),
        approval_status: map(int, map(address, bool)),
        pack_price: int,
        buy_function_expiry: int,
        user_bought: map(address, int),
        max_available: int,
        per_user_availability: int,
        total_packs_bought: int
        }

    function duplicate_not_exist(_addresses: list(address)) : bool =
        switch(_addresses)
         [] => true
         (_address) :: remaining_addresses =>
            let count_indices : list(int) = List.find_indices((x) => x ==_address, _addresses)
            if(List.length(count_indices) > 1)
                false
            else
                duplicate_not_exist(remaining_addresses)

    stateful entrypoint init(_owners: list(address), _ratio: list(int), _required_approvals: int, extend_expiry_milli: int, _max_available: int, _per_user_available: int) = 
        require(List.length(_owners) > 1, "more than one, owners required!")
        require(List.length(_owners) == List.length(_ratio), "ratio should be defined for each owner!")
        require(List.find((x) => x > 100, _ratio) == None, "ratio should be less than 100!")
        require(List.find((x) => x < 1, _ratio) == None, "ratio should be greater than 1!")
        require(_required_approvals > 1 && _required_approvals =< List.length(_owners) , "certain approvals from available owners required!")
        require(duplicate_not_exist(_owners), "all addresses should be different.")
        { owners = _owners,
            ratio = _ratio,
            is_owner = {},
            approvals_required = _required_approvals,
            transactions = [],
            approval_status = {},
            pack_price = 79 * 1000000000000000,
            buy_function_expiry = Chain.timestamp + extend_expiry_milli,
            user_bought = {},
            max_available = _max_available,
            per_user_availability = _per_user_available,
            total_packs_bought = 0
            } 
    
    payable stateful entrypoint reserve_booster_packs(buyer: address) =
        require(Call.value == state.pack_price, "Sent less or more AE than the price of booster pack!")
        require(Chain.timestamp < state.buy_function_expiry, "The Presale is expired!")
        require(state.max_available > state.total_packs_bought, "Out of reservation period packs!")
        require(state.per_user_availability > (Map.lookup_default(Call.caller, state.user_bought, 1) / state.pack_price), "You cannot perform more reservations!")
        manage_divide_and_send_ae(state.owners, 0)
        put(state{user_bought[buyer = 0] @ ub = ub + Call.value})
        put(state{total_packs_bought @ a = a + 1})
        Chain.event(Deposit(buyer, Call.value))

    stateful function manage_divide_and_send_ae(holders: list(address), i: int) =
        switch(holders)
            [] => ()
            (one_holder :: remaining_holders) =>
                // send staked percentage from total ae in the contract to all holders.
                divide_and_send_ae(one_holder, List.get(i, state.ratio))
                manage_divide_and_send_ae(remaining_holders, i+1)

    stateful function divide_and_send_ae(one_holder: address, one_balance: int) =
        Chain.spend(one_holder, (Contract.balance / 100) * one_balance)

    stateful entrypoint submit(_address: address, _value: int, _data: bytes(32)) =
        require(List.contains(Call.caller, state.owners), "Not an owner to submit!")
    
        let tx_data : list(transaction) = [{
            to = _address,
            value = _value,
            data = _data,
            executed = false
         }]
        
        put(state{transactions @ txs = txs ++ tx_data})
        let _index : int = List.length(state.transactions) - 1
        Chain.event(Submit(_index))


    payable stateful entrypoint sendTestValue(): int =
        Call.value

    
    public stateful entrypoint approve(_txId: int) =
        require(List.contains(Call.caller, state.owners), "Not an owner to approve!")
        require(_txId < List.length(state.transactions), "Tx id doesn't exist!")
        require(!Map.lookup_default(Call.caller, Map.lookup_default(_txId, state.approval_status, {}), false), "Already approved tx id!")
        require(!List.get(_txId, state.transactions).executed, "Already executed tx id!")

        put(state{approval_status[_txId = {}][Call.caller] = true})
        Chain.event(Approve(Call.caller, _txId))

    function __get_approval_count(_list: list(address * bool), _count: int) : int =
        switch(_list)
            (_address, _approved) :: remaining_pairs =>
                if(_approved == true)
                    __get_approval_count(remaining_pairs, _count + 1)
                else
                    __get_approval_count(remaining_pairs, _count)
            [] => _count


    public entrypoint provide_approval_count(_txId: int) : int =
        let _to_list : list(address * bool) = Map.to_list(state.approval_status[_txId])
        __get_approval_count(_to_list, 0)
        
    
    // add loop execute if require to send multiple with address, amount...
    // function to add more owners and edit required approvals (conditions if existing owners and their required approvals accepts it)
    stateful entrypoint execute(_txId: int) =
        require(_txId < List.length(state.transactions), "Tx id doesn't exist!")
        require(!List.get(_txId, state.transactions).executed, "Already executed tx id!")
        
        require(provide_approval_count(_txId) >= state.approvals_required, "approvals < required")

        let tx_found : transaction = List.get(_txId, state.transactions)
        
        let tx_updated : transaction = {
            to = tx_found.to,
            value = tx_found.value,
            data = tx_found.data,
            executed = true
            }

        let txs_updated : list(transaction) = List.insert_at(_txId, tx_updated, state.transactions)
        
        put(state{transactions = txs_updated})
        Chain.spend(tx_updated.to, tx_updated.value)

        Chain.event(Execute(_txId))

    stateful entrypoint revoke (_txId: int) =
        require(List.contains(Call.caller, state.owners), "Not an owner to approve!")
        require(_txId < List.length(state.transactions), "Tx id doesn't exist!")
        require(!List.get(_txId, state.transactions).executed, "Already executed tx id!")

        require(state.approval_status[_txId][Call.caller], "Not approved Tx before, by caller!")
        put(state{approval_status[_txId = {}][Call.caller] = false})

        Chain.event(Revoke(Call.caller, _txId))


    // Add get functions (check expiry, price of pack, owners, transaction detail, etc....

    public entrypoint get_user_spendings(buyer: address) : int =
        state.user_bought[buyer]

    public entrypoint get_buy_function_expiry() : int =
        state.buy_function_expiry
    
    public entrypoint get_booster_pack_price() : int =
        state.pack_price
    
    public entrypoint get_owners() : list(address) =
        state.owners

    public entrypoint get_owners_ratios() : list(int) =
        state.ratio
    
    public entrypoint how_many_user_bought(addr: address) : int =
        Map.lookup_default(addr, state.user_bought, 0) / state.pack_price

    public entrypoint total_available_packs() : int =
        state.max_available
    
    public entrypoint total_bought() : int =
        state.total_packs_bought

    public entrypoint per_user_availability () : int =
        state.per_user_availability

    public entrypoint transaction_detail(id: int) : transaction =
        List.get(id, state.transactions)

    public entrypoint approval_status(id: int) : map(address, bool) =
        state.approval_status[id]
    
    record front_end_data = {
        total_bought: int,
        total_available_packs: int,
        get_buy_function_expiry: int,
        how_many_user_bought: int,
        per_user_availability: int
     }

    public entrypoint all_required_data(): front_end_data =
        {
            total_bought = total_bought(),
            total_available_packs = total_available_packs(),
            get_buy_function_expiry = get_buy_function_expiry(),
            how_many_user_bought = how_many_user_bought(Call.caller),
            per_user_availability = per_user_availability()
         }
